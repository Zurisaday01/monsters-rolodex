{"version":3,"sources":["components/CardElment/CardElement.js","components/CardList/CardList.js","components/SearchBox/SearchBox.js","App.js","reportWebVitals.js","index.js"],"names":["CardElement","props","className","src","monster","id","name","email","CardList","monsters","length","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","a","fetch","users","json","data","this","console","log","filterdMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mWAeeA,EAZK,SAAAC,GACnB,OACC,sBAAKC,UAAU,iBAAf,UACC,qBACCC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,4BAEJ,6BAA4BJ,EAAMG,QAAQE,MAAjCL,EAAMG,QAAQC,IACvB,4BAAIJ,EAAMG,QAAQG,YCQNC,EAdE,SAAAP,GAChB,OACC,qBAAKC,UAAU,YAAf,SAC4B,IAA1BD,EAAMQ,SAASC,OACf,mBAAGR,UAAU,YAAb,uBAEAD,EAAMQ,SAASE,KAAI,SAAAP,GAAO,OACzB,cAAC,EAAD,CAA8BA,QAASA,GAArBA,EAAQC,UCIhBO,G,MAXG,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aACjC,OACC,uBACCZ,UAAU,SACVa,KAAK,OACLF,YAAaA,EACbG,SAAUF,MCJPG,E,kDACL,aAAe,IAAD,8BACb,gBAmBDH,aAAe,SAAAI,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAlBtC,EAAKC,MAAQ,CACZd,SAAU,GACVW,YAAa,IALD,E,4FASd,8BAAAI,EAAA,+EAEsBC,MAAM,8CAF5B,cAEQC,EAFR,gBAGqBA,EAAMC,OAH3B,OAGQC,EAHR,OAIEC,KAAKV,SAAS,CAAEV,SAAUmB,IAC1BE,QAAQC,IAAIH,GALd,kDAOEE,QAAQC,IAAR,MAPF,0D,0EAyBA,WACC,MAAkCF,KAAKN,MAA/Bd,EAAR,EAAQA,SAAUW,EAAlB,EAAkBA,YAEZY,EAAkBvB,EAASwB,QAAO,SAAA7B,GAAO,OAC9CA,EAAQE,KAAK4B,cAAcC,SAASf,EAAYc,kBAGjD,OACC,sBAAKhC,UAAU,MAAf,UACC,kDACA,cAAC,EAAD,CACCW,YAAY,iBACZC,aAAce,KAAKf,eAEpB,cAAC,EAAD,CAAUL,SAAUuB,W,GAjDNI,aAsDHnB,IChDAoB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.67a54b04.chunk.js","sourcesContent":["import React from 'react';\r\nimport './CardElement.css';\r\n\r\nconst CardElement = props => {\r\n\treturn (\r\n\t\t<div className='card-container'>\r\n\t\t\t<img\r\n\t\t\t\tsrc={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}\r\n\t\t\t/>\r\n\t\t\t<h2 key={props.monster.id}>{props.monster.name}</h2>\r\n\t\t\t<p>{props.monster.email}</p>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default CardElement;\r\n","import React from 'react';\r\nimport './CardList.css';\r\nimport CardElement from '../CardElment/CardElement';\r\n\r\nconst CardList = props => {\r\n\treturn (\r\n\t\t<div className='card-list'>\r\n\t\t\t{props.monsters.length === 0 ? (\r\n\t\t\t\t<p className='paragraph'>Not found</p>\r\n\t\t\t) : (\r\n\t\t\t\tprops.monsters.map(monster => (\r\n\t\t\t\t\t<CardElement key={monster.id} monster={monster} />\r\n\t\t\t\t))\r\n\t\t\t)}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nimport './SearchBox.css';\r\n\r\nconst SearchBox = ({ placeholder, handleChange }) => {\r\n\treturn (\r\n\t\t<input\r\n\t\t\tclassName='search'\r\n\t\t\ttype='text'\r\n\t\t\tplaceholder={placeholder}\r\n\t\t\tonChange={handleChange}\r\n\t\t/>\r\n\t);\r\n};\r\n\r\nexport default SearchBox;\r\n","import { Component } from 'react';\n\nimport './App.css';\nimport CardList from './components/CardList/CardList';\nimport SearchBox from './components/SearchBox/SearchBox';\n\nclass App extends Component {\n\tconstructor() {\n\t\tsuper();\n\n\t\tthis.state = {\n\t\t\tmonsters: [],\n\t\t\tsearchField: '',\n\t\t};\n\t}\n\n\tasync componentDidMount() {\n\t\ttry {\n\t\t\tconst users = await fetch('https://jsonplaceholder.typicode.com/users');\n\t\t\tconst data = await users.json();\n\t\t\tthis.setState({ monsters: data });\n\t\t\tconsole.log(data);\n\t\t} catch (err) {\n\t\t\tconsole.log(err);\n\t\t}\n\t}\n\n\thandleChange = e => {\n\t\tthis.setState({ searchField: e.target.value });\n\t};\n\n\t// This keyword belongs to App -> lexical scope\n\t// handleChange = e => {\n\t// \tthis.setState({ searchField: e.target.value });\n\t// };\n\n\t//  this this keyword belongs to the input\n\t// handleChange(e) {\n\t// \tthis.setState({ searchField: e.target.value });\n\t// }\n\n\trender() {\n\t\tconst { monsters, searchField } = this.state;\n\n\t\tconst filterdMonsters = monsters.filter(monster =>\n\t\t\tmonster.name.toLowerCase().includes(searchField.toLowerCase())\n\t\t);\n\n\t\treturn (\n\t\t\t<div className='App'>\n\t\t\t\t<h1>Monsters Rolodex</h1>\n\t\t\t\t<SearchBox\n\t\t\t\t\tplaceholder='Search monster'\n\t\t\t\t\thandleChange={this.handleChange}\n\t\t\t\t/>\n\t\t\t\t<CardList monsters={filterdMonsters} />\n\t\t\t</div>\n\t\t);\n\t}\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}